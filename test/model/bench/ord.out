_ :: Int `compare` _ :: Int  =  EQ
_ :: Int `compare` x :: Int  =  LT
_ :: Int `compare` 0 :: Int  =  LT
_ :: Int `compare` id _ :: Int  =  LT
_ :: Int `compare` _ :: Bool  =  GT
_ :: Int `compare` _ :: Char  =  GT
_ :: Int `compare` _ :: [Int]  =  LT
x :: Int `compare` _ :: Int  =  GT
0 :: Int `compare` _ :: Int  =  GT
id _ :: Int `compare` _ :: Int  =  GT
_ :: Bool `compare` _ :: Int  =  LT
_ :: Char `compare` _ :: Int  =  LT
_ :: [Int] `compare` _ :: Int  =  GT
_ :: Int `compare` y :: Int  =  LT
_ :: Int `compare` 1 :: Int  =  LT
_ :: Int `compare` id x :: Int  =  LT
_ :: Int `compare` id 0 :: Int  =  LT
_ :: Int `compare` id (id _) :: Int  =  LT
_ :: Int `compare` negate _ :: Int  =  LT
_ :: Int `compare` abs _ :: Int  =  LT
_ :: Int `compare` _ + _ :: Int  =  LT
_ :: Int `compare` head _ :: Int  =  LT
_ :: Int `compare` ord _ :: Int  =  LT
_ :: Int `compare` p :: Bool  =  GT
_ :: Int `compare` False :: Bool  =  LT
_ :: Int `compare` True :: Bool  =  LT
_ :: Int `compare` not _ :: Bool  =  LT
_ :: Int `compare` c :: Char  =  GT
_ :: Int `compare` 'a' :: Char  =  LT
_ :: Int `compare` xs :: [Int]  =  LT
_ :: Int `compare` [] :: [Int]  =  LT
_ :: Int `compare` _:_ :: [Int]  =  LT
_ :: Int `compare` id :: Int -> Int  =  LT
_ :: Int `compare` (+) :: Int -> Int -> Int  =  LT
x :: Int `compare` x :: Int  =  EQ
x :: Int `compare` 0 :: Int  =  LT
x :: Int `compare` id _ :: Int  =  LT
x :: Int `compare` _ :: Bool  =  GT
x :: Int `compare` _ :: Char  =  GT
x :: Int `compare` _ :: [Int]  =  LT
0 :: Int `compare` x :: Int  =  GT
0 :: Int `compare` 0 :: Int  =  EQ
0 :: Int `compare` id _ :: Int  =  LT
0 :: Int `compare` _ :: Bool  =  GT
0 :: Int `compare` _ :: Char  =  GT
0 :: Int `compare` _ :: [Int]  =  GT
id _ :: Int `compare` x :: Int  =  GT
id _ :: Int `compare` 0 :: Int  =  GT
id _ :: Int `compare` id _ :: Int  =  EQ
id _ :: Int `compare` _ :: Bool  =  GT
id _ :: Int `compare` _ :: Char  =  GT
id _ :: Int `compare` _ :: [Int]  =  GT
_ :: Bool `compare` x :: Int  =  LT
_ :: Bool `compare` 0 :: Int  =  LT
_ :: Bool `compare` id _ :: Int  =  LT
_ :: Bool `compare` _ :: Bool  =  EQ
_ :: Bool `compare` _ :: Char  =  LT
_ :: Bool `compare` _ :: [Int]  =  LT
_ :: Char `compare` x :: Int  =  LT
_ :: Char `compare` 0 :: Int  =  LT
_ :: Char `compare` id _ :: Int  =  LT
_ :: Char `compare` _ :: Bool  =  GT
_ :: Char `compare` _ :: Char  =  EQ
_ :: Char `compare` _ :: [Int]  =  LT
_ :: [Int] `compare` x :: Int  =  GT
_ :: [Int] `compare` 0 :: Int  =  LT
_ :: [Int] `compare` id _ :: Int  =  LT
_ :: [Int] `compare` _ :: Bool  =  GT
_ :: [Int] `compare` _ :: Char  =  GT
_ :: [Int] `compare` _ :: [Int]  =  EQ
y :: Int `compare` _ :: Int  =  GT
1 :: Int `compare` _ :: Int  =  GT
id x :: Int `compare` _ :: Int  =  GT
id 0 :: Int `compare` _ :: Int  =  GT
id (id _) :: Int `compare` _ :: Int  =  GT
negate _ :: Int `compare` _ :: Int  =  GT
abs _ :: Int `compare` _ :: Int  =  GT
_ + _ :: Int `compare` _ :: Int  =  GT
head _ :: Int `compare` _ :: Int  =  GT
ord _ :: Int `compare` _ :: Int  =  GT
p :: Bool `compare` _ :: Int  =  LT
False :: Bool `compare` _ :: Int  =  GT
True :: Bool `compare` _ :: Int  =  GT
not _ :: Bool `compare` _ :: Int  =  GT
c :: Char `compare` _ :: Int  =  LT
'a' :: Char `compare` _ :: Int  =  GT
xs :: [Int] `compare` _ :: Int  =  GT
[] :: [Int] `compare` _ :: Int  =  GT
_:_ :: [Int] `compare` _ :: Int  =  GT
id :: Int -> Int `compare` _ :: Int  =  GT
(+) :: Int -> Int -> Int `compare` _ :: Int  =  GT
_ :: Int `compare` z :: Int  =  LT
_ :: Int `compare` -1 :: Int  =  LT
_ :: Int `compare` id y :: Int  =  LT
_ :: Int `compare` id 1 :: Int  =  LT
_ :: Int `compare` id (id x) :: Int  =  LT
_ :: Int `compare` id (id 0) :: Int  =  LT
_ :: Int `compare` id (id (id _)) :: Int  =  LT
_ :: Int `compare` id (negate _) :: Int  =  LT
_ :: Int `compare` id (abs _) :: Int  =  LT
_ :: Int `compare` id (_ + _) :: Int  =  LT
_ :: Int `compare` id (head _) :: Int  =  LT
_ :: Int `compare` id (ord _) :: Int  =  LT
_ :: Int `compare` negate x :: Int  =  LT
_ :: Int `compare` negate 0 :: Int  =  LT
_ :: Int `compare` negate (id _) :: Int  =  LT
_ :: Int `compare` abs x :: Int  =  LT
_ :: Int `compare` abs 0 :: Int  =  LT
_ :: Int `compare` abs (id _) :: Int  =  LT
_ :: Int `compare` _ + x :: Int  =  LT
_ :: Int `compare` _ + 0 :: Int  =  LT
_ :: Int `compare` _ + id _ :: Int  =  LT
_ :: Int `compare` x + _ :: Int  =  LT
_ :: Int `compare` 0 + _ :: Int  =  LT
_ :: Int `compare` id _ + _ :: Int  =  LT
_ :: Int `compare` _ * _ :: Int  =  LT
_ :: Int `compare` f _ :: Int  =  LT
_ :: Int `compare` head xs :: Int  =  LT
_ :: Int `compare` head [] :: Int  =  LT
_ :: Int `compare` head (_:_) :: Int  =  LT
_ :: Int `compare` ord c :: Int  =  LT
_ :: Int `compare` ord 'a' :: Int  =  LT
_ :: Int `compare` q :: Bool  =  GT
_ :: Int `compare` not p :: Bool  =  LT
_ :: Int `compare` not False :: Bool  =  LT
_ :: Int `compare` not True :: Bool  =  LT
_ :: Int `compare` not (not _) :: Bool  =  LT
_ :: Int `compare` _ || _ :: Bool  =  LT
_ :: Int `compare` d :: Char  =  GT
_ :: Int `compare` ' ' :: Char  =  LT
_ :: Int `compare` ys :: [Int]  =  LT
_ :: Int `compare` [0] :: [Int]  =  LT
_ :: Int `compare` _:xs :: [Int]  =  LT
_ :: Int `compare` [_] :: [Int]  =  LT
_ :: Int `compare` _:_:_ :: [Int]  =  LT
_ :: Int `compare` x:_ :: [Int]  =  LT
_ :: Int `compare` 0:_ :: [Int]  =  LT
_ :: Int `compare` id _:_ :: [Int]  =  LT
_ :: Int `compare` tail _ :: [Int]  =  LT
_ :: Int `compare` _ ++ _ :: [Int]  =  LT
_ :: Int `compare` negate :: Int -> Int  =  LT
_ :: Int `compare` abs :: Int -> Int  =  LT
_ :: Int `compare` (_ +) :: Int -> Int  =  LT
_ :: Int `compare` (*) :: Int -> Int -> Int  =  LT
_ :: Int `compare` not :: Bool -> Bool  =  LT
_ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
x :: Int `compare` y :: Int  =  LT
x :: Int `compare` 1 :: Int  =  LT
x :: Int `compare` id x :: Int  =  LT
x :: Int `compare` id 0 :: Int  =  LT
x :: Int `compare` id (id _) :: Int  =  LT
x :: Int `compare` negate _ :: Int  =  LT
x :: Int `compare` abs _ :: Int  =  LT
x :: Int `compare` _ + _ :: Int  =  LT
x :: Int `compare` head _ :: Int  =  LT
x :: Int `compare` ord _ :: Int  =  LT
x :: Int `compare` p :: Bool  =  GT
x :: Int `compare` False :: Bool  =  LT
x :: Int `compare` True :: Bool  =  LT
x :: Int `compare` not _ :: Bool  =  LT
x :: Int `compare` c :: Char  =  GT
x :: Int `compare` 'a' :: Char  =  LT
x :: Int `compare` xs :: [Int]  =  LT
x :: Int `compare` [] :: [Int]  =  LT
x :: Int `compare` _:_ :: [Int]  =  LT
x :: Int `compare` id :: Int -> Int  =  LT
x :: Int `compare` (+) :: Int -> Int -> Int  =  LT
0 :: Int `compare` y :: Int  =  GT
0 :: Int `compare` 1 :: Int  =  LT
0 :: Int `compare` id x :: Int  =  LT
0 :: Int `compare` id 0 :: Int  =  LT
0 :: Int `compare` id (id _) :: Int  =  LT
0 :: Int `compare` negate _ :: Int  =  LT
0 :: Int `compare` abs _ :: Int  =  LT
0 :: Int `compare` _ + _ :: Int  =  LT
0 :: Int `compare` head _ :: Int  =  LT
0 :: Int `compare` ord _ :: Int  =  LT
0 :: Int `compare` p :: Bool  =  GT
0 :: Int `compare` False :: Bool  =  GT
0 :: Int `compare` True :: Bool  =  GT
0 :: Int `compare` not _ :: Bool  =  LT
0 :: Int `compare` c :: Char  =  GT
0 :: Int `compare` 'a' :: Char  =  GT
0 :: Int `compare` xs :: [Int]  =  GT
0 :: Int `compare` [] :: [Int]  =  LT
0 :: Int `compare` _:_ :: [Int]  =  LT
0 :: Int `compare` id :: Int -> Int  =  LT
0 :: Int `compare` (+) :: Int -> Int -> Int  =  LT
id _ :: Int `compare` y :: Int  =  GT
id _ :: Int `compare` 1 :: Int  =  GT
id _ :: Int `compare` id x :: Int  =  LT
id _ :: Int `compare` id 0 :: Int  =  LT
id _ :: Int `compare` id (id _) :: Int  =  LT
id _ :: Int `compare` negate _ :: Int  =  LT
id _ :: Int `compare` abs _ :: Int  =  GT
id _ :: Int `compare` _ + _ :: Int  =  LT
id _ :: Int `compare` head _ :: Int  =  LT
id _ :: Int `compare` ord _ :: Int  =  GT
id _ :: Int `compare` p :: Bool  =  GT
id _ :: Int `compare` False :: Bool  =  GT
id _ :: Int `compare` True :: Bool  =  GT
id _ :: Int `compare` not _ :: Bool  =  GT
id _ :: Int `compare` c :: Char  =  GT
id _ :: Int `compare` 'a' :: Char  =  GT
id _ :: Int `compare` xs :: [Int]  =  GT
id _ :: Int `compare` [] :: [Int]  =  GT
id _ :: Int `compare` _:_ :: [Int]  =  LT
id _ :: Int `compare` id :: Int -> Int  =  GT
id _ :: Int `compare` (+) :: Int -> Int -> Int  =  GT
_ :: Bool `compare` y :: Int  =  LT
_ :: Bool `compare` 1 :: Int  =  LT
_ :: Bool `compare` id x :: Int  =  LT
_ :: Bool `compare` id 0 :: Int  =  LT
_ :: Bool `compare` id (id _) :: Int  =  LT
_ :: Bool `compare` negate _ :: Int  =  LT
_ :: Bool `compare` abs _ :: Int  =  LT
_ :: Bool `compare` _ + _ :: Int  =  LT
_ :: Bool `compare` head _ :: Int  =  LT
_ :: Bool `compare` ord _ :: Int  =  LT
_ :: Bool `compare` p :: Bool  =  LT
_ :: Bool `compare` False :: Bool  =  LT
_ :: Bool `compare` True :: Bool  =  LT
_ :: Bool `compare` not _ :: Bool  =  LT
_ :: Bool `compare` c :: Char  =  LT
_ :: Bool `compare` 'a' :: Char  =  LT
_ :: Bool `compare` xs :: [Int]  =  LT
_ :: Bool `compare` [] :: [Int]  =  LT
_ :: Bool `compare` _:_ :: [Int]  =  LT
_ :: Bool `compare` id :: Int -> Int  =  LT
_ :: Bool `compare` (+) :: Int -> Int -> Int  =  LT
_ :: Char `compare` y :: Int  =  LT
_ :: Char `compare` 1 :: Int  =  LT
_ :: Char `compare` id x :: Int  =  LT
_ :: Char `compare` id 0 :: Int  =  LT
_ :: Char `compare` id (id _) :: Int  =  LT
_ :: Char `compare` negate _ :: Int  =  LT
_ :: Char `compare` abs _ :: Int  =  LT
_ :: Char `compare` _ + _ :: Int  =  LT
_ :: Char `compare` head _ :: Int  =  LT
_ :: Char `compare` ord _ :: Int  =  LT
_ :: Char `compare` p :: Bool  =  GT
_ :: Char `compare` False :: Bool  =  LT
_ :: Char `compare` True :: Bool  =  LT
_ :: Char `compare` not _ :: Bool  =  LT
_ :: Char `compare` c :: Char  =  LT
_ :: Char `compare` 'a' :: Char  =  LT
_ :: Char `compare` xs :: [Int]  =  LT
_ :: Char `compare` [] :: [Int]  =  LT
_ :: Char `compare` _:_ :: [Int]  =  LT
_ :: Char `compare` id :: Int -> Int  =  LT
_ :: Char `compare` (+) :: Int -> Int -> Int  =  LT
_ :: [Int] `compare` y :: Int  =  GT
_ :: [Int] `compare` 1 :: Int  =  LT
_ :: [Int] `compare` id x :: Int  =  LT
_ :: [Int] `compare` id 0 :: Int  =  LT
_ :: [Int] `compare` id (id _) :: Int  =  LT
_ :: [Int] `compare` negate _ :: Int  =  LT
_ :: [Int] `compare` abs _ :: Int  =  LT
_ :: [Int] `compare` _ + _ :: Int  =  LT
_ :: [Int] `compare` head _ :: Int  =  LT
_ :: [Int] `compare` ord _ :: Int  =  LT
_ :: [Int] `compare` p :: Bool  =  GT
_ :: [Int] `compare` False :: Bool  =  LT
_ :: [Int] `compare` True :: Bool  =  LT
_ :: [Int] `compare` not _ :: Bool  =  LT
_ :: [Int] `compare` c :: Char  =  GT
_ :: [Int] `compare` 'a' :: Char  =  LT
_ :: [Int] `compare` xs :: [Int]  =  LT
_ :: [Int] `compare` [] :: [Int]  =  LT
_ :: [Int] `compare` _:_ :: [Int]  =  LT
_ :: [Int] `compare` id :: Int -> Int  =  LT
_ :: [Int] `compare` (+) :: Int -> Int -> Int  =  LT
y :: Int `compare` x :: Int  =  GT
y :: Int `compare` 0 :: Int  =  LT
y :: Int `compare` id _ :: Int  =  LT
y :: Int `compare` _ :: Bool  =  GT
y :: Int `compare` _ :: Char  =  GT
y :: Int `compare` _ :: [Int]  =  LT
1 :: Int `compare` x :: Int  =  GT
1 :: Int `compare` 0 :: Int  =  GT
1 :: Int `compare` id _ :: Int  =  LT
1 :: Int `compare` _ :: Bool  =  GT
1 :: Int `compare` _ :: Char  =  GT
1 :: Int `compare` _ :: [Int]  =  GT
id x :: Int `compare` x :: Int  =  GT
id x :: Int `compare` 0 :: Int  =  GT
id x :: Int `compare` id _ :: Int  =  GT
id x :: Int `compare` _ :: Bool  =  GT
id x :: Int `compare` _ :: Char  =  GT
id x :: Int `compare` _ :: [Int]  =  GT
id 0 :: Int `compare` x :: Int  =  GT
id 0 :: Int `compare` 0 :: Int  =  GT
id 0 :: Int `compare` id _ :: Int  =  GT
id 0 :: Int `compare` _ :: Bool  =  GT
id 0 :: Int `compare` _ :: Char  =  GT
id 0 :: Int `compare` _ :: [Int]  =  GT
id (id _) :: Int `compare` x :: Int  =  GT
id (id _) :: Int `compare` 0 :: Int  =  GT
id (id _) :: Int `compare` id _ :: Int  =  GT
id (id _) :: Int `compare` _ :: Bool  =  GT
id (id _) :: Int `compare` _ :: Char  =  GT
id (id _) :: Int `compare` _ :: [Int]  =  GT
negate _ :: Int `compare` x :: Int  =  GT
negate _ :: Int `compare` 0 :: Int  =  GT
negate _ :: Int `compare` id _ :: Int  =  GT
negate _ :: Int `compare` _ :: Bool  =  GT
negate _ :: Int `compare` _ :: Char  =  GT
negate _ :: Int `compare` _ :: [Int]  =  GT
abs _ :: Int `compare` x :: Int  =  GT
abs _ :: Int `compare` 0 :: Int  =  GT
abs _ :: Int `compare` id _ :: Int  =  LT
abs _ :: Int `compare` _ :: Bool  =  GT
abs _ :: Int `compare` _ :: Char  =  GT
abs _ :: Int `compare` _ :: [Int]  =  GT
_ + _ :: Int `compare` x :: Int  =  GT
_ + _ :: Int `compare` 0 :: Int  =  GT
_ + _ :: Int `compare` id _ :: Int  =  GT
_ + _ :: Int `compare` _ :: Bool  =  GT
_ + _ :: Int `compare` _ :: Char  =  GT
_ + _ :: Int `compare` _ :: [Int]  =  GT
head _ :: Int `compare` x :: Int  =  GT
head _ :: Int `compare` 0 :: Int  =  GT
head _ :: Int `compare` id _ :: Int  =  GT
head _ :: Int `compare` _ :: Bool  =  GT
head _ :: Int `compare` _ :: Char  =  GT
head _ :: Int `compare` _ :: [Int]  =  GT
ord _ :: Int `compare` x :: Int  =  GT
ord _ :: Int `compare` 0 :: Int  =  GT
ord _ :: Int `compare` id _ :: Int  =  LT
ord _ :: Int `compare` _ :: Bool  =  GT
ord _ :: Int `compare` _ :: Char  =  GT
ord _ :: Int `compare` _ :: [Int]  =  GT
p :: Bool `compare` x :: Int  =  LT
p :: Bool `compare` 0 :: Int  =  LT
p :: Bool `compare` id _ :: Int  =  LT
p :: Bool `compare` _ :: Bool  =  GT
p :: Bool `compare` _ :: Char  =  LT
p :: Bool `compare` _ :: [Int]  =  LT
False :: Bool `compare` x :: Int  =  GT
False :: Bool `compare` 0 :: Int  =  LT
False :: Bool `compare` id _ :: Int  =  LT
False :: Bool `compare` _ :: Bool  =  GT
False :: Bool `compare` _ :: Char  =  GT
False :: Bool `compare` _ :: [Int]  =  GT
True :: Bool `compare` x :: Int  =  GT
True :: Bool `compare` 0 :: Int  =  LT
True :: Bool `compare` id _ :: Int  =  LT
True :: Bool `compare` _ :: Bool  =  GT
True :: Bool `compare` _ :: Char  =  GT
True :: Bool `compare` _ :: [Int]  =  GT
not _ :: Bool `compare` x :: Int  =  GT
not _ :: Bool `compare` 0 :: Int  =  GT
not _ :: Bool `compare` id _ :: Int  =  LT
not _ :: Bool `compare` _ :: Bool  =  GT
not _ :: Bool `compare` _ :: Char  =  GT
not _ :: Bool `compare` _ :: [Int]  =  GT
c :: Char `compare` x :: Int  =  LT
c :: Char `compare` 0 :: Int  =  LT
c :: Char `compare` id _ :: Int  =  LT
c :: Char `compare` _ :: Bool  =  GT
c :: Char `compare` _ :: Char  =  GT
c :: Char `compare` _ :: [Int]  =  LT
'a' :: Char `compare` x :: Int  =  GT
'a' :: Char `compare` 0 :: Int  =  LT
'a' :: Char `compare` id _ :: Int  =  LT
'a' :: Char `compare` _ :: Bool  =  GT
'a' :: Char `compare` _ :: Char  =  GT
'a' :: Char `compare` _ :: [Int]  =  GT
xs :: [Int] `compare` x :: Int  =  GT
xs :: [Int] `compare` 0 :: Int  =  LT
xs :: [Int] `compare` id _ :: Int  =  LT
xs :: [Int] `compare` _ :: Bool  =  GT
xs :: [Int] `compare` _ :: Char  =  GT
xs :: [Int] `compare` _ :: [Int]  =  GT
[] :: [Int] `compare` x :: Int  =  GT
[] :: [Int] `compare` 0 :: Int  =  GT
[] :: [Int] `compare` id _ :: Int  =  LT
[] :: [Int] `compare` _ :: Bool  =  GT
[] :: [Int] `compare` _ :: Char  =  GT
[] :: [Int] `compare` _ :: [Int]  =  GT
_:_ :: [Int] `compare` x :: Int  =  GT
_:_ :: [Int] `compare` 0 :: Int  =  GT
_:_ :: [Int] `compare` id _ :: Int  =  GT
_:_ :: [Int] `compare` _ :: Bool  =  GT
_:_ :: [Int] `compare` _ :: Char  =  GT
_:_ :: [Int] `compare` _ :: [Int]  =  GT
id :: Int -> Int `compare` x :: Int  =  GT
id :: Int -> Int `compare` 0 :: Int  =  GT
id :: Int -> Int `compare` id _ :: Int  =  LT
id :: Int -> Int `compare` _ :: Bool  =  GT
id :: Int -> Int `compare` _ :: Char  =  GT
id :: Int -> Int `compare` _ :: [Int]  =  GT
(+) :: Int -> Int -> Int `compare` x :: Int  =  GT
(+) :: Int -> Int -> Int `compare` 0 :: Int  =  GT
(+) :: Int -> Int -> Int `compare` id _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` _ :: Bool  =  GT
(+) :: Int -> Int -> Int `compare` _ :: Char  =  GT
(+) :: Int -> Int -> Int `compare` _ :: [Int]  =  GT
z :: Int `compare` _ :: Int  =  GT
-1 :: Int `compare` _ :: Int  =  GT
id y :: Int `compare` _ :: Int  =  GT
id 1 :: Int `compare` _ :: Int  =  GT
id (id x) :: Int `compare` _ :: Int  =  GT
id (id 0) :: Int `compare` _ :: Int  =  GT
id (id (id _)) :: Int `compare` _ :: Int  =  GT
id (negate _) :: Int `compare` _ :: Int  =  GT
id (abs _) :: Int `compare` _ :: Int  =  GT
id (_ + _) :: Int `compare` _ :: Int  =  GT
id (head _) :: Int `compare` _ :: Int  =  GT
id (ord _) :: Int `compare` _ :: Int  =  GT
negate x :: Int `compare` _ :: Int  =  GT
negate 0 :: Int `compare` _ :: Int  =  GT
negate (id _) :: Int `compare` _ :: Int  =  GT
abs x :: Int `compare` _ :: Int  =  GT
abs 0 :: Int `compare` _ :: Int  =  GT
abs (id _) :: Int `compare` _ :: Int  =  GT
_ + x :: Int `compare` _ :: Int  =  GT
_ + 0 :: Int `compare` _ :: Int  =  GT
_ + id _ :: Int `compare` _ :: Int  =  GT
x + _ :: Int `compare` _ :: Int  =  GT
0 + _ :: Int `compare` _ :: Int  =  GT
id _ + _ :: Int `compare` _ :: Int  =  GT
_ * _ :: Int `compare` _ :: Int  =  GT
f _ :: Int `compare` _ :: Int  =  GT
head xs :: Int `compare` _ :: Int  =  GT
head [] :: Int `compare` _ :: Int  =  GT
head (_:_) :: Int `compare` _ :: Int  =  GT
ord c :: Int `compare` _ :: Int  =  GT
ord 'a' :: Int `compare` _ :: Int  =  GT
q :: Bool `compare` _ :: Int  =  LT
not p :: Bool `compare` _ :: Int  =  GT
not False :: Bool `compare` _ :: Int  =  GT
not True :: Bool `compare` _ :: Int  =  GT
not (not _) :: Bool `compare` _ :: Int  =  GT
_ || _ :: Bool `compare` _ :: Int  =  GT
d :: Char `compare` _ :: Int  =  LT
' ' :: Char `compare` _ :: Int  =  GT
ys :: [Int] `compare` _ :: Int  =  GT
[0] :: [Int] `compare` _ :: Int  =  GT
_:xs :: [Int] `compare` _ :: Int  =  GT
[_] :: [Int] `compare` _ :: Int  =  GT
_:_:_ :: [Int] `compare` _ :: Int  =  GT
x:_ :: [Int] `compare` _ :: Int  =  GT
0:_ :: [Int] `compare` _ :: Int  =  GT
id _:_ :: [Int] `compare` _ :: Int  =  GT
tail _ :: [Int] `compare` _ :: Int  =  GT
_ ++ _ :: [Int] `compare` _ :: Int  =  GT
negate :: Int -> Int `compare` _ :: Int  =  GT
abs :: Int -> Int `compare` _ :: Int  =  GT
(_ +) :: Int -> Int `compare` _ :: Int  =  GT
(*) :: Int -> Int -> Int `compare` _ :: Int  =  GT
not :: Bool -> Bool `compare` _ :: Int  =  GT
(||) :: Bool -> Bool -> Bool `compare` _ :: Int  =  GT
_ :: Int `compare` x' :: Int  =  LT
_ :: Int `compare` 2 :: Int  =  LT
_ :: Int `compare` id z :: Int  =  LT
_ :: Int `compare` id (-1) :: Int  =  LT
_ :: Int `compare` id (id y) :: Int  =  LT
_ :: Int `compare` id (id 1) :: Int  =  LT
_ :: Int `compare` id (id (id x)) :: Int  =  LT
_ :: Int `compare` id (id (id 0)) :: Int  =  LT
_ :: Int `compare` id (id (id (id _))) :: Int  =  LT
_ :: Int `compare` id (id (negate _)) :: Int  =  LT
_ :: Int `compare` id (id (abs _)) :: Int  =  LT
_ :: Int `compare` id (id (_ + _)) :: Int  =  LT
_ :: Int `compare` id (id (head _)) :: Int  =  LT
_ :: Int `compare` id (id (ord _)) :: Int  =  LT
_ :: Int `compare` id (negate x) :: Int  =  LT
_ :: Int `compare` id (negate 0) :: Int  =  LT
_ :: Int `compare` id (negate (id _)) :: Int  =  LT
_ :: Int `compare` id (abs x) :: Int  =  LT
_ :: Int `compare` id (abs 0) :: Int  =  LT
_ :: Int `compare` id (abs (id _)) :: Int  =  LT
_ :: Int `compare` id (_ + x) :: Int  =  LT
_ :: Int `compare` id (_ + 0) :: Int  =  LT
_ :: Int `compare` id (_ + id _) :: Int  =  LT
_ :: Int `compare` id (x + _) :: Int  =  LT
_ :: Int `compare` id (0 + _) :: Int  =  LT
_ :: Int `compare` id (id _ + _) :: Int  =  LT
_ :: Int `compare` id (_ * _) :: Int  =  LT
_ :: Int `compare` id (f _) :: Int  =  LT
_ :: Int `compare` id (head xs) :: Int  =  LT
_ :: Int `compare` id (head []) :: Int  =  LT
_ :: Int `compare` id (head (_:_)) :: Int  =  LT
_ :: Int `compare` id (ord c) :: Int  =  LT
_ :: Int `compare` id (ord 'a') :: Int  =  LT
_ :: Int `compare` negate y :: Int  =  LT
_ :: Int `compare` negate 1 :: Int  =  LT
_ :: Int `compare` negate (id x) :: Int  =  LT
_ :: Int `compare` negate (id 0) :: Int  =  LT
_ :: Int `compare` negate (id (id _)) :: Int  =  LT
_ :: Int `compare` negate (negate _) :: Int  =  LT
_ :: Int `compare` negate (abs _) :: Int  =  LT
_ :: Int `compare` negate (_ + _) :: Int  =  LT
_ :: Int `compare` negate (head _) :: Int  =  LT
_ :: Int `compare` negate (ord _) :: Int  =  LT
_ :: Int `compare` abs y :: Int  =  LT
_ :: Int `compare` abs 1 :: Int  =  LT
_ :: Int `compare` abs (id x) :: Int  =  LT
_ :: Int `compare` abs (id 0) :: Int  =  LT
_ :: Int `compare` abs (id (id _)) :: Int  =  LT
_ :: Int `compare` abs (negate _) :: Int  =  LT
_ :: Int `compare` abs (abs _) :: Int  =  LT
_ :: Int `compare` abs (_ + _) :: Int  =  LT
_ :: Int `compare` abs (head _) :: Int  =  LT
_ :: Int `compare` abs (ord _) :: Int  =  LT
_ :: Int `compare` _ + y :: Int  =  LT
_ :: Int `compare` _ + 1 :: Int  =  LT
_ :: Int `compare` _ + id x :: Int  =  LT
_ :: Int `compare` _ + id 0 :: Int  =  LT
_ :: Int `compare` _ + id (id _) :: Int  =  LT
_ :: Int `compare` _ + negate _ :: Int  =  LT
_ :: Int `compare` _ + abs _ :: Int  =  LT
_ :: Int `compare` _ + (_ + _) :: Int  =  LT
_ :: Int `compare` _ + head _ :: Int  =  LT
_ :: Int `compare` _ + ord _ :: Int  =  LT
_ :: Int `compare` x + x :: Int  =  LT
_ :: Int `compare` x + 0 :: Int  =  LT
_ :: Int `compare` x + id _ :: Int  =  LT
_ :: Int `compare` 0 + x :: Int  =  LT
_ :: Int `compare` 0 + 0 :: Int  =  LT
_ :: Int `compare` 0 + id _ :: Int  =  LT
_ :: Int `compare` id _ + x :: Int  =  LT
_ :: Int `compare` id _ + 0 :: Int  =  LT
_ :: Int `compare` id _ + id _ :: Int  =  LT
_ :: Int `compare` _ * x :: Int  =  LT
_ :: Int `compare` _ * 0 :: Int  =  LT
_ :: Int `compare` _ * id _ :: Int  =  LT
_ :: Int `compare` f x :: Int  =  LT
_ :: Int `compare` f 0 :: Int  =  LT
_ :: Int `compare` f (id _) :: Int  =  LT
_ :: Int `compare` y + _ :: Int  =  LT
_ :: Int `compare` 1 + _ :: Int  =  LT
_ :: Int `compare` id x + _ :: Int  =  LT
_ :: Int `compare` id 0 + _ :: Int  =  LT
_ :: Int `compare` id (id _) + _ :: Int  =  LT
_ :: Int `compare` negate _ + _ :: Int  =  LT
_ :: Int `compare` abs _ + _ :: Int  =  LT
_ :: Int `compare` (_ + _) + _ :: Int  =  LT
_ :: Int `compare` head _ + _ :: Int  =  LT
_ :: Int `compare` ord _ + _ :: Int  =  LT
_ :: Int `compare` x * _ :: Int  =  LT
_ :: Int `compare` 0 * _ :: Int  =  LT
_ :: Int `compare` id _ * _ :: Int  =  LT
_ :: Int `compare` g _ :: Int  =  LT
_ :: Int `compare` head ys :: Int  =  LT
_ :: Int `compare` head [0] :: Int  =  LT
_ :: Int `compare` head (_:xs) :: Int  =  LT
_ :: Int `compare` head [_] :: Int  =  LT
_ :: Int `compare` head (_:_:_) :: Int  =  LT
_ :: Int `compare` head (x:_) :: Int  =  LT
_ :: Int `compare` head (0:_) :: Int  =  LT
_ :: Int `compare` head (id _:_) :: Int  =  LT
_ :: Int `compare` head (tail _) :: Int  =  LT
_ :: Int `compare` head (_ ++ _) :: Int  =  LT
_ :: Int `compare` ord d :: Int  =  LT
_ :: Int `compare` ord ' ' :: Int  =  LT
_ :: Int `compare` r :: Bool  =  GT
_ :: Int `compare` not q :: Bool  =  LT
_ :: Int `compare` not (not p) :: Bool  =  LT
_ :: Int `compare` not (not False) :: Bool  =  LT
_ :: Int `compare` not (not True) :: Bool  =  LT
_ :: Int `compare` not (not (not _)) :: Bool  =  LT
_ :: Int `compare` not (_ || _) :: Bool  =  LT
_ :: Int `compare` _ || p :: Bool  =  LT
_ :: Int `compare` _ || False :: Bool  =  LT
_ :: Int `compare` _ || True :: Bool  =  LT
_ :: Int `compare` _ || not _ :: Bool  =  LT
_ :: Int `compare` p || _ :: Bool  =  LT
_ :: Int `compare` False || _ :: Bool  =  LT
_ :: Int `compare` True || _ :: Bool  =  LT
_ :: Int `compare` not _ || _ :: Bool  =  LT
_ :: Int `compare` _ && _ :: Bool  =  LT
_ :: Int `compare` _ == _ :: Bool  =  LT
_ :: Int `compare` _ == _ :: Bool  =  LT
_ :: Int `compare` e :: Char  =  GT
_ :: Int `compare` 'b' :: Char  =  LT
_ :: Int `compare` zs :: [Int]  =  LT
_ :: Int `compare` [0,0] :: [Int]  =  LT
_ :: Int `compare` [1] :: [Int]  =  LT
_ :: Int `compare` _:ys :: [Int]  =  LT
_ :: Int `compare` [_,0] :: [Int]  =  LT
_ :: Int `compare` _:_:xs :: [Int]  =  LT
_ :: Int `compare` [_,_] :: [Int]  =  LT
_ :: Int `compare` _:_:_:_ :: [Int]  =  LT
_ :: Int `compare` _:x:_ :: [Int]  =  LT
_ :: Int `compare` _:0:_ :: [Int]  =  LT
_ :: Int `compare` _:id _:_ :: [Int]  =  LT
_ :: Int `compare` _:tail _ :: [Int]  =  LT
_ :: Int `compare` _:(_ ++ _) :: [Int]  =  LT
_ :: Int `compare` x:xs :: [Int]  =  LT
_ :: Int `compare` [x] :: [Int]  =  LT
_ :: Int `compare` x:_:_ :: [Int]  =  LT
_ :: Int `compare` 0:xs :: [Int]  =  LT
_ :: Int `compare` [0] :: [Int]  =  LT
_ :: Int `compare` 0:_:_ :: [Int]  =  LT
_ :: Int `compare` id _:xs :: [Int]  =  LT
_ :: Int `compare` [id _] :: [Int]  =  LT
_ :: Int `compare` id _:_:_ :: [Int]  =  LT
_ :: Int `compare` y:_ :: [Int]  =  LT
_ :: Int `compare` 1:_ :: [Int]  =  LT
_ :: Int `compare` id x:_ :: [Int]  =  LT
_ :: Int `compare` id 0:_ :: [Int]  =  LT
_ :: Int `compare` id (id _):_ :: [Int]  =  LT
_ :: Int `compare` negate _:_ :: [Int]  =  LT
_ :: Int `compare` abs _:_ :: [Int]  =  LT
_ :: Int `compare` _ + _:_ :: [Int]  =  LT
_ :: Int `compare` head _:_ :: [Int]  =  LT
_ :: Int `compare` ord _:_ :: [Int]  =  LT
_ :: Int `compare` tail xs :: [Int]  =  LT
_ :: Int `compare` tail [] :: [Int]  =  LT
_ :: Int `compare` tail (_:_) :: [Int]  =  LT
_ :: Int `compare` _ ++ xs :: [Int]  =  LT
_ :: Int `compare` _ ++ [] :: [Int]  =  LT
_ :: Int `compare` _ ++ (_:_) :: [Int]  =  LT
_ :: Int `compare` xs ++ _ :: [Int]  =  LT
_ :: Int `compare` [] ++ _ :: [Int]  =  LT
_ :: Int `compare` (_:_) ++ _ :: [Int]  =  LT
_ :: Int `compare` sort _ :: [Int]  =  LT
_ :: Int `compare` insert _ _ :: [Int]  =  LT
_ :: Int `compare` (x +) :: Int -> Int  =  LT
_ :: Int `compare` (0 +) :: Int -> Int  =  LT
_ :: Int `compare` (id _ +) :: Int -> Int  =  LT
_ :: Int `compare` (_ *) :: Int -> Int  =  LT
_ :: Int `compare` f :: Int -> Int  =  LT
_ :: Int `compare` (_ ||) :: Bool -> Bool  =  LT
_ :: Int `compare` (&&) :: Bool -> Bool -> Bool  =  LT
x :: Int `compare` z :: Int  =  LT
x :: Int `compare` -1 :: Int  =  LT
x :: Int `compare` id y :: Int  =  LT
x :: Int `compare` id 1 :: Int  =  LT
x :: Int `compare` id (id x) :: Int  =  LT
x :: Int `compare` id (id 0) :: Int  =  LT
x :: Int `compare` id (id (id _)) :: Int  =  LT
x :: Int `compare` id (negate _) :: Int  =  LT
x :: Int `compare` id (abs _) :: Int  =  LT
x :: Int `compare` id (_ + _) :: Int  =  LT
x :: Int `compare` id (head _) :: Int  =  LT
x :: Int `compare` id (ord _) :: Int  =  LT
x :: Int `compare` negate x :: Int  =  LT
x :: Int `compare` negate 0 :: Int  =  LT
x :: Int `compare` negate (id _) :: Int  =  LT
x :: Int `compare` abs x :: Int  =  LT
x :: Int `compare` abs 0 :: Int  =  LT
x :: Int `compare` abs (id _) :: Int  =  LT
x :: Int `compare` _ + x :: Int  =  LT
x :: Int `compare` _ + 0 :: Int  =  LT
x :: Int `compare` _ + id _ :: Int  =  LT
x :: Int `compare` x + _ :: Int  =  LT
x :: Int `compare` 0 + _ :: Int  =  LT
x :: Int `compare` id _ + _ :: Int  =  LT
x :: Int `compare` _ * _ :: Int  =  LT
x :: Int `compare` f _ :: Int  =  LT
x :: Int `compare` head xs :: Int  =  LT
x :: Int `compare` head [] :: Int  =  LT
x :: Int `compare` head (_:_) :: Int  =  LT
x :: Int `compare` ord c :: Int  =  LT
x :: Int `compare` ord 'a' :: Int  =  LT
x :: Int `compare` q :: Bool  =  GT
x :: Int `compare` not p :: Bool  =  LT
x :: Int `compare` not False :: Bool  =  LT
x :: Int `compare` not True :: Bool  =  LT
x :: Int `compare` not (not _) :: Bool  =  LT
x :: Int `compare` _ || _ :: Bool  =  LT
x :: Int `compare` d :: Char  =  GT
x :: Int `compare` ' ' :: Char  =  LT
x :: Int `compare` ys :: [Int]  =  LT
x :: Int `compare` [0] :: [Int]  =  LT
x :: Int `compare` _:xs :: [Int]  =  LT
x :: Int `compare` [_] :: [Int]  =  LT
x :: Int `compare` _:_:_ :: [Int]  =  LT
x :: Int `compare` x:_ :: [Int]  =  LT
x :: Int `compare` 0:_ :: [Int]  =  LT
x :: Int `compare` id _:_ :: [Int]  =  LT
x :: Int `compare` tail _ :: [Int]  =  LT
x :: Int `compare` _ ++ _ :: [Int]  =  LT
x :: Int `compare` negate :: Int -> Int  =  LT
x :: Int `compare` abs :: Int -> Int  =  LT
x :: Int `compare` (_ +) :: Int -> Int  =  LT
x :: Int `compare` (*) :: Int -> Int -> Int  =  LT
x :: Int `compare` not :: Bool -> Bool  =  LT
x :: Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
0 :: Int `compare` z :: Int  =  GT
0 :: Int `compare` -1 :: Int  =  GT
0 :: Int `compare` id y :: Int  =  LT
0 :: Int `compare` id 1 :: Int  =  LT
0 :: Int `compare` id (id x) :: Int  =  LT
0 :: Int `compare` id (id 0) :: Int  =  LT
0 :: Int `compare` id (id (id _)) :: Int  =  LT
0 :: Int `compare` id (negate _) :: Int  =  LT
0 :: Int `compare` id (abs _) :: Int  =  LT
0 :: Int `compare` id (_ + _) :: Int  =  LT
0 :: Int `compare` id (head _) :: Int  =  LT
0 :: Int `compare` id (ord _) :: Int  =  LT
0 :: Int `compare` negate x :: Int  =  LT
0 :: Int `compare` negate 0 :: Int  =  LT
0 :: Int `compare` negate (id _) :: Int  =  LT
0 :: Int `compare` abs x :: Int  =  LT
0 :: Int `compare` abs 0 :: Int  =  LT
0 :: Int `compare` abs (id _) :: Int  =  LT
0 :: Int `compare` _ + x :: Int  =  LT
0 :: Int `compare` _ + 0 :: Int  =  LT
0 :: Int `compare` _ + id _ :: Int  =  LT
0 :: Int `compare` x + _ :: Int  =  LT
0 :: Int `compare` 0 + _ :: Int  =  LT
0 :: Int `compare` id _ + _ :: Int  =  LT
0 :: Int `compare` _ * _ :: Int  =  LT
0 :: Int `compare` f _ :: Int  =  LT
0 :: Int `compare` head xs :: Int  =  LT
0 :: Int `compare` head [] :: Int  =  LT
0 :: Int `compare` head (_:_) :: Int  =  LT
0 :: Int `compare` ord c :: Int  =  LT
0 :: Int `compare` ord 'a' :: Int  =  LT
0 :: Int `compare` q :: Bool  =  GT
0 :: Int `compare` not p :: Bool  =  LT
0 :: Int `compare` not False :: Bool  =  LT
0 :: Int `compare` not True :: Bool  =  LT
0 :: Int `compare` not (not _) :: Bool  =  LT
0 :: Int `compare` _ || _ :: Bool  =  LT
0 :: Int `compare` d :: Char  =  GT
0 :: Int `compare` ' ' :: Char  =  GT
0 :: Int `compare` ys :: [Int]  =  GT
0 :: Int `compare` [0] :: [Int]  =  LT
0 :: Int `compare` _:xs :: [Int]  =  LT
0 :: Int `compare` [_] :: [Int]  =  LT
0 :: Int `compare` _:_:_ :: [Int]  =  LT
0 :: Int `compare` x:_ :: [Int]  =  LT
0 :: Int `compare` 0:_ :: [Int]  =  LT
0 :: Int `compare` id _:_ :: [Int]  =  LT
0 :: Int `compare` tail _ :: [Int]  =  LT
0 :: Int `compare` _ ++ _ :: [Int]  =  LT
0 :: Int `compare` negate :: Int -> Int  =  LT
0 :: Int `compare` abs :: Int -> Int  =  LT
0 :: Int `compare` (_ +) :: Int -> Int  =  LT
0 :: Int `compare` (*) :: Int -> Int -> Int  =  LT
0 :: Int `compare` not :: Bool -> Bool  =  LT
0 :: Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
id _ :: Int `compare` z :: Int  =  GT
id _ :: Int `compare` -1 :: Int  =  GT
id _ :: Int `compare` id y :: Int  =  LT
id _ :: Int `compare` id 1 :: Int  =  LT
id _ :: Int `compare` id (id x) :: Int  =  LT
id _ :: Int `compare` id (id 0) :: Int  =  LT
id _ :: Int `compare` id (id (id _)) :: Int  =  LT
id _ :: Int `compare` id (negate _) :: Int  =  LT
id _ :: Int `compare` id (abs _) :: Int  =  LT
id _ :: Int `compare` id (_ + _) :: Int  =  LT
id _ :: Int `compare` id (head _) :: Int  =  LT
id _ :: Int `compare` id (ord _) :: Int  =  LT
id _ :: Int `compare` negate x :: Int  =  LT
id _ :: Int `compare` negate 0 :: Int  =  LT
id _ :: Int `compare` negate (id _) :: Int  =  LT
id _ :: Int `compare` abs x :: Int  =  GT
id _ :: Int `compare` abs 0 :: Int  =  LT
id _ :: Int `compare` abs (id _) :: Int  =  LT
id _ :: Int `compare` _ + x :: Int  =  LT
id _ :: Int `compare` _ + 0 :: Int  =  LT
id _ :: Int `compare` _ + id _ :: Int  =  LT
id _ :: Int `compare` x + _ :: Int  =  LT
id _ :: Int `compare` 0 + _ :: Int  =  LT
id _ :: Int `compare` id _ + _ :: Int  =  LT
id _ :: Int `compare` _ * _ :: Int  =  LT
id _ :: Int `compare` f _ :: Int  =  GT
id _ :: Int `compare` head xs :: Int  =  LT
id _ :: Int `compare` head [] :: Int  =  LT
id _ :: Int `compare` head (_:_) :: Int  =  LT
id _ :: Int `compare` ord c :: Int  =  GT
id _ :: Int `compare` ord 'a' :: Int  =  LT
id _ :: Int `compare` q :: Bool  =  GT
id _ :: Int `compare` not p :: Bool  =  GT
id _ :: Int `compare` not False :: Bool  =  LT
id _ :: Int `compare` not True :: Bool  =  LT
id _ :: Int `compare` not (not _) :: Bool  =  LT
id _ :: Int `compare` _ || _ :: Bool  =  LT
id _ :: Int `compare` d :: Char  =  GT
id _ :: Int `compare` ' ' :: Char  =  GT
id _ :: Int `compare` ys :: [Int]  =  GT
id _ :: Int `compare` [0] :: [Int]  =  GT
id _ :: Int `compare` _:xs :: [Int]  =  LT
id _ :: Int `compare` [_] :: [Int]  =  LT
id _ :: Int `compare` _:_:_ :: [Int]  =  LT
id _ :: Int `compare` x:_ :: [Int]  =  LT
id _ :: Int `compare` 0:_ :: [Int]  =  LT
id _ :: Int `compare` id _:_ :: [Int]  =  LT
id _ :: Int `compare` tail _ :: [Int]  =  LT
id _ :: Int `compare` _ ++ _ :: [Int]  =  LT
id _ :: Int `compare` negate :: Int -> Int  =  GT
id _ :: Int `compare` abs :: Int -> Int  =  GT
id _ :: Int `compare` (_ +) :: Int -> Int  =  LT
id _ :: Int `compare` (*) :: Int -> Int -> Int  =  GT
id _ :: Int `compare` not :: Bool -> Bool  =  GT
id _ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
_ :: Bool `compare` z :: Int  =  LT
_ :: Bool `compare` -1 :: Int  =  LT
_ :: Bool `compare` id y :: Int  =  LT
_ :: Bool `compare` id 1 :: Int  =  LT
_ :: Bool `compare` id (id x) :: Int  =  LT
_ :: Bool `compare` id (id 0) :: Int  =  LT
_ :: Bool `compare` id (id (id _)) :: Int  =  LT
_ :: Bool `compare` id (negate _) :: Int  =  LT
_ :: Bool `compare` id (abs _) :: Int  =  LT
_ :: Bool `compare` id (_ + _) :: Int  =  LT
_ :: Bool `compare` id (head _) :: Int  =  LT
_ :: Bool `compare` id (ord _) :: Int  =  LT
_ :: Bool `compare` negate x :: Int  =  LT
_ :: Bool `compare` negate 0 :: Int  =  LT
_ :: Bool `compare` negate (id _) :: Int  =  LT
_ :: Bool `compare` abs x :: Int  =  LT
_ :: Bool `compare` abs 0 :: Int  =  LT
_ :: Bool `compare` abs (id _) :: Int  =  LT
_ :: Bool `compare` _ + x :: Int  =  LT
_ :: Bool `compare` _ + 0 :: Int  =  LT
_ :: Bool `compare` _ + id _ :: Int  =  LT
_ :: Bool `compare` x + _ :: Int  =  LT
_ :: Bool `compare` 0 + _ :: Int  =  LT
_ :: Bool `compare` id _ + _ :: Int  =  LT
_ :: Bool `compare` _ * _ :: Int  =  LT
_ :: Bool `compare` f _ :: Int  =  LT
_ :: Bool `compare` head xs :: Int  =  LT
_ :: Bool `compare` head [] :: Int  =  LT
_ :: Bool `compare` head (_:_) :: Int  =  LT
_ :: Bool `compare` ord c :: Int  =  LT
_ :: Bool `compare` ord 'a' :: Int  =  LT
_ :: Bool `compare` q :: Bool  =  LT
_ :: Bool `compare` not p :: Bool  =  LT
_ :: Bool `compare` not False :: Bool  =  LT
_ :: Bool `compare` not True :: Bool  =  LT
_ :: Bool `compare` not (not _) :: Bool  =  LT
_ :: Bool `compare` _ || _ :: Bool  =  LT
_ :: Bool `compare` d :: Char  =  LT
_ :: Bool `compare` ' ' :: Char  =  LT
_ :: Bool `compare` ys :: [Int]  =  LT
_ :: Bool `compare` [0] :: [Int]  =  LT
_ :: Bool `compare` _:xs :: [Int]  =  LT
_ :: Bool `compare` [_] :: [Int]  =  LT
_ :: Bool `compare` _:_:_ :: [Int]  =  LT
_ :: Bool `compare` x:_ :: [Int]  =  LT
_ :: Bool `compare` 0:_ :: [Int]  =  LT
_ :: Bool `compare` id _:_ :: [Int]  =  LT
_ :: Bool `compare` tail _ :: [Int]  =  LT
_ :: Bool `compare` _ ++ _ :: [Int]  =  LT
_ :: Bool `compare` negate :: Int -> Int  =  LT
_ :: Bool `compare` abs :: Int -> Int  =  LT
_ :: Bool `compare` (_ +) :: Int -> Int  =  LT
_ :: Bool `compare` (*) :: Int -> Int -> Int  =  LT
_ :: Bool `compare` not :: Bool -> Bool  =  LT
_ :: Bool `compare` (||) :: Bool -> Bool -> Bool  =  LT
_ :: Char `compare` z :: Int  =  LT
_ :: Char `compare` -1 :: Int  =  LT
_ :: Char `compare` id y :: Int  =  LT
_ :: Char `compare` id 1 :: Int  =  LT
_ :: Char `compare` id (id x) :: Int  =  LT
_ :: Char `compare` id (id 0) :: Int  =  LT
_ :: Char `compare` id (id (id _)) :: Int  =  LT
_ :: Char `compare` id (negate _) :: Int  =  LT
_ :: Char `compare` id (abs _) :: Int  =  LT
_ :: Char `compare` id (_ + _) :: Int  =  LT
_ :: Char `compare` id (head _) :: Int  =  LT
_ :: Char `compare` id (ord _) :: Int  =  LT
_ :: Char `compare` negate x :: Int  =  LT
_ :: Char `compare` negate 0 :: Int  =  LT
_ :: Char `compare` negate (id _) :: Int  =  LT
_ :: Char `compare` abs x :: Int  =  LT
_ :: Char `compare` abs 0 :: Int  =  LT
_ :: Char `compare` abs (id _) :: Int  =  LT
_ :: Char `compare` _ + x :: Int  =  LT
_ :: Char `compare` _ + 0 :: Int  =  LT
_ :: Char `compare` _ + id _ :: Int  =  LT
_ :: Char `compare` x + _ :: Int  =  LT
_ :: Char `compare` 0 + _ :: Int  =  LT
_ :: Char `compare` id _ + _ :: Int  =  LT
_ :: Char `compare` _ * _ :: Int  =  LT
_ :: Char `compare` f _ :: Int  =  LT
_ :: Char `compare` head xs :: Int  =  LT
_ :: Char `compare` head [] :: Int  =  LT
_ :: Char `compare` head (_:_) :: Int  =  LT
_ :: Char `compare` ord c :: Int  =  LT
_ :: Char `compare` ord 'a' :: Int  =  LT
_ :: Char `compare` q :: Bool  =  GT
_ :: Char `compare` not p :: Bool  =  LT
_ :: Char `compare` not False :: Bool  =  LT
_ :: Char `compare` not True :: Bool  =  LT
_ :: Char `compare` not (not _) :: Bool  =  LT
_ :: Char `compare` _ || _ :: Bool  =  LT
_ :: Char `compare` d :: Char  =  LT
_ :: Char `compare` ' ' :: Char  =  LT
_ :: Char `compare` ys :: [Int]  =  LT
_ :: Char `compare` [0] :: [Int]  =  LT
_ :: Char `compare` _:xs :: [Int]  =  LT
_ :: Char `compare` [_] :: [Int]  =  LT
_ :: Char `compare` _:_:_ :: [Int]  =  LT
_ :: Char `compare` x:_ :: [Int]  =  LT
_ :: Char `compare` 0:_ :: [Int]  =  LT
_ :: Char `compare` id _:_ :: [Int]  =  LT
_ :: Char `compare` tail _ :: [Int]  =  LT
_ :: Char `compare` _ ++ _ :: [Int]  =  LT
_ :: Char `compare` negate :: Int -> Int  =  LT
_ :: Char `compare` abs :: Int -> Int  =  LT
_ :: Char `compare` (_ +) :: Int -> Int  =  LT
_ :: Char `compare` (*) :: Int -> Int -> Int  =  LT
_ :: Char `compare` not :: Bool -> Bool  =  LT
_ :: Char `compare` (||) :: Bool -> Bool -> Bool  =  LT
_ :: [Int] `compare` z :: Int  =  GT
_ :: [Int] `compare` -1 :: Int  =  LT
_ :: [Int] `compare` id y :: Int  =  LT
_ :: [Int] `compare` id 1 :: Int  =  LT
_ :: [Int] `compare` id (id x) :: Int  =  LT
_ :: [Int] `compare` id (id 0) :: Int  =  LT
_ :: [Int] `compare` id (id (id _)) :: Int  =  LT
_ :: [Int] `compare` id (negate _) :: Int  =  LT
_ :: [Int] `compare` id (abs _) :: Int  =  LT
_ :: [Int] `compare` id (_ + _) :: Int  =  LT
_ :: [Int] `compare` id (head _) :: Int  =  LT
_ :: [Int] `compare` id (ord _) :: Int  =  LT
_ :: [Int] `compare` negate x :: Int  =  LT
_ :: [Int] `compare` negate 0 :: Int  =  LT
_ :: [Int] `compare` negate (id _) :: Int  =  LT
_ :: [Int] `compare` abs x :: Int  =  LT
_ :: [Int] `compare` abs 0 :: Int  =  LT
_ :: [Int] `compare` abs (id _) :: Int  =  LT
_ :: [Int] `compare` _ + x :: Int  =  LT
_ :: [Int] `compare` _ + 0 :: Int  =  LT
_ :: [Int] `compare` _ + id _ :: Int  =  LT
_ :: [Int] `compare` x + _ :: Int  =  LT
_ :: [Int] `compare` 0 + _ :: Int  =  LT
_ :: [Int] `compare` id _ + _ :: Int  =  LT
_ :: [Int] `compare` _ * _ :: Int  =  LT
_ :: [Int] `compare` f _ :: Int  =  LT
_ :: [Int] `compare` head xs :: Int  =  LT
_ :: [Int] `compare` head [] :: Int  =  LT
_ :: [Int] `compare` head (_:_) :: Int  =  LT
_ :: [Int] `compare` ord c :: Int  =  LT
_ :: [Int] `compare` ord 'a' :: Int  =  LT
_ :: [Int] `compare` q :: Bool  =  GT
_ :: [Int] `compare` not p :: Bool  =  LT
_ :: [Int] `compare` not False :: Bool  =  LT
_ :: [Int] `compare` not True :: Bool  =  LT
_ :: [Int] `compare` not (not _) :: Bool  =  LT
_ :: [Int] `compare` _ || _ :: Bool  =  LT
_ :: [Int] `compare` d :: Char  =  GT
_ :: [Int] `compare` ' ' :: Char  =  LT
_ :: [Int] `compare` ys :: [Int]  =  LT
_ :: [Int] `compare` [0] :: [Int]  =  LT
_ :: [Int] `compare` _:xs :: [Int]  =  LT
_ :: [Int] `compare` [_] :: [Int]  =  LT
_ :: [Int] `compare` _:_:_ :: [Int]  =  LT
_ :: [Int] `compare` x:_ :: [Int]  =  LT
_ :: [Int] `compare` 0:_ :: [Int]  =  LT
_ :: [Int] `compare` id _:_ :: [Int]  =  LT
_ :: [Int] `compare` tail _ :: [Int]  =  LT
_ :: [Int] `compare` _ ++ _ :: [Int]  =  LT
_ :: [Int] `compare` negate :: Int -> Int  =  LT
_ :: [Int] `compare` abs :: Int -> Int  =  LT
_ :: [Int] `compare` (_ +) :: Int -> Int  =  LT
_ :: [Int] `compare` (*) :: Int -> Int -> Int  =  LT
_ :: [Int] `compare` not :: Bool -> Bool  =  LT
_ :: [Int] `compare` (||) :: Bool -> Bool -> Bool  =  LT
y :: Int `compare` y :: Int  =  EQ
y :: Int `compare` 1 :: Int  =  LT
y :: Int `compare` id x :: Int  =  LT
y :: Int `compare` id 0 :: Int  =  LT
y :: Int `compare` id (id _) :: Int  =  LT
y :: Int `compare` negate _ :: Int  =  LT
y :: Int `compare` abs _ :: Int  =  LT
y :: Int `compare` _ + _ :: Int  =  LT
y :: Int `compare` head _ :: Int  =  LT
y :: Int `compare` ord _ :: Int  =  LT
y :: Int `compare` p :: Bool  =  GT
y :: Int `compare` False :: Bool  =  LT
y :: Int `compare` True :: Bool  =  LT
y :: Int `compare` not _ :: Bool  =  LT
y :: Int `compare` c :: Char  =  GT
y :: Int `compare` 'a' :: Char  =  LT
y :: Int `compare` xs :: [Int]  =  LT
y :: Int `compare` [] :: [Int]  =  LT
y :: Int `compare` _:_ :: [Int]  =  LT
y :: Int `compare` id :: Int -> Int  =  LT
y :: Int `compare` (+) :: Int -> Int -> Int  =  LT
1 :: Int `compare` y :: Int  =  GT
1 :: Int `compare` 1 :: Int  =  EQ
1 :: Int `compare` id x :: Int  =  LT
1 :: Int `compare` id 0 :: Int  =  LT
1 :: Int `compare` id (id _) :: Int  =  LT
1 :: Int `compare` negate _ :: Int  =  LT
1 :: Int `compare` abs _ :: Int  =  LT
1 :: Int `compare` _ + _ :: Int  =  LT
1 :: Int `compare` head _ :: Int  =  LT
1 :: Int `compare` ord _ :: Int  =  LT
1 :: Int `compare` p :: Bool  =  GT
1 :: Int `compare` False :: Bool  =  GT
1 :: Int `compare` True :: Bool  =  GT
1 :: Int `compare` not _ :: Bool  =  LT
1 :: Int `compare` c :: Char  =  GT
1 :: Int `compare` 'a' :: Char  =  GT
1 :: Int `compare` xs :: [Int]  =  GT
1 :: Int `compare` [] :: [Int]  =  LT
1 :: Int `compare` _:_ :: [Int]  =  LT
1 :: Int `compare` id :: Int -> Int  =  LT
1 :: Int `compare` (+) :: Int -> Int -> Int  =  LT
id x :: Int `compare` y :: Int  =  GT

